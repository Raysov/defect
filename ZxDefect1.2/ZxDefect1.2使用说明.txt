-------------------------------------------------------------------------------
---------------------------单次阈值分割----------------------------------------
---------------------------腐蚀去除分割后的伪缺陷------------------------------
---------------------------膨胀使真缺陷扩大------------------------------------
1.使用时配置ZxDefect.h、ZxDefect.lib和ZxDefect.dll文件，opencv3.0.0配置
2.接口函数参数说明如下：
// 函数功能:   检测图像缺陷
// 函数返回值：零代表成功，非零代表失败
// 函数输入值：pRxInfo  - 指向输入数据结构体指针
//	       pRxDefResult - 指向输出数据结构体指针
// 作者：
// 版本：
// 时间：
int findDefect(RxDetInfo* pRxInfo, RxDefResult* pRxDefResult);


// 函数功能: 当前检测结果复位，主要用于释放dll内部申请的内存以及缺陷统计信息清零
// 函数返回值：无
// 函数输入值：无 
// 作者：
// 版本：
// 时间：
void resetDefectInfo();


// 输入待检测信息结构体
typedef struct _tagRxDetInfo_{
	unsigned int   uImgWidth; 	// 图像像素宽
	unsigned int   uImgHeight;	// 图像像素高
	unsigned int   uImgChannel;	// 图像通道数
	unsigned char* pImgPtr;   	// 图像数据指针
	unsigned int   backgSize; 	// 均值模板大小，最小值应为3，为奇数递增，默认值设为15
	unsigned int   fengeT;	        // 分割阈值，0-50,默认值应设为5
	unsigned int   erodeNum;	// 分割结果腐蚀次数，取值设置为1-5，默认值为1，一般情况下取1或2即可
	unsigned int   dilateNum;	// 分割结果膨胀次数，取值设置为1-5，默认值为1，一般情况下取1或2即可
}RxDetInfo;



// 缺陷信息结构体
typedef struct _tagRxDefInfo{
	unsigned int    uPtNumber;    // 缺陷像素个数
	unsigned int    uContourPtNumber;  //缺陷外轮廓像素个数
	unsigned int    pDefTypePtr;  // 缺陷类型，1-表示气孔，2-表示缩松缩孔，3表示裂纹
	unsigned int*   pPtXPosPtr;   // 缺陷外轮廓像素X坐标(RxDefResult*)malloc(sizeof(RxDefResult))
	unsigned int*   pPtYPosPtr;   // 缺陷外轮廓像素Y坐标
}RxDefInfo;




// 输出检测信息结构体
typedef struct _tagRxDefResult_
{
	unsigned int    uDefNumber;     // 有无缺陷, 0表示无缺陷，1表示1个缺陷
	RxDefInfo*      pDefInfoPtr;    //缺陷信息结构体指针
	
}RxDefResult;



3.ZxDefect.dll测试程序如下：
#include "ZxDefect.h"

uchar* matToUchar(Mat img, unsigned int img_width, unsigned int img_height);


int main()
{
	Mat src = imread("C:/Users/JTY/Desktop/3.jpg");
	//if (src.channels() == 3)
	//{

	//	cvtColor(src, src, CV_BGR2GRAY);
	//}
	uchar * p1 = matToUchar(src, src.cols, src.rows);
	uint cha = src.channels();

	RxDetInfo input;
	input.uImgChannel = cha;
	input.pImgPtr = p1;
	input.uImgWidth = src.cols;
	input.uImgHeight = src.rows;
	input.backgSize = 21;
	input.fengeT = 7;
	input.erodeNum = 1;
	input.dilateNum = 1;

	RxDefResult result;

	findDefect(&input, &result);
	cout << result.uDefNumber << endl;
	for (int i = 0; i < result.uDefNumber; ++i)
	{
		cout << result.pDefInfoPtr[i].pDefTypePtr << endl;
		cout << result.pDefInfoPtr[i].uPtNumber << endl;        //输出缺陷面积点数
		cout << result.pDefInfoPtr[i].uContourPtNumber << endl; //输出缺陷外轮廓点数
		for (int j = 0; j < result.pDefInfoPtr[i].uContourPtNumber; ++j)
		{
			cout << result.pDefInfoPtr[i].pPtXPosPtr[j] << endl; 
			cout << result.pDefInfoPtr[i].pPtYPosPtr[j] << endl;
		}
	}
	resetDefectInfo();
	waitKey();
	return 0;
}



// 函数功能:   将uchar类型的数据转换为Mat类型
// 函数返回值：零代表成功，非零代表失败
// 函数输入值：img  - 输入法人Mat类图像，img_width-图像宽度，img_height-图像高度
uchar* matToUchar(Mat img, unsigned int img_width, unsigned int img_height)
{
	if (img.channels() == 3)
	{
		uchar * p = new uchar[img_width * img_height * 3];
		for (int i = 0; i < img_width * img_height * 3; i++)
		{
			p[i] = (uchar)img.at<Vec3b>(i / (img_width * 3), (i % (img_width * 3)) / 3)[i % 3];
		}
		return p;
	}
	else if (img.channels() == 1)
	{
		uchar * p = new uchar[img_width * img_height];
		for (int i = 0; i<img_height; ++i) //行数--高度
		{
			unsigned char* data = img.ptr<unsigned char>(i); //指向第i行的数据 
			for (int j = 0; j<img_width; ++j) //列数 -- 宽度 
			{
				p[i*img_width + j] = data[j];
			}
		}
		return p;
	}
}



